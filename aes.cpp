#include "aes.hpp"
#include <stdio.h>
#include <cstring>
#include <string>

const std::string LEGEND[] = {"input", "start", "s_box", "s_row", "m_col", "k_sch", "output", "iinput",
							  "istart", "is_box", "is_row", "ik_sch", "ik_add", "ioutput"};

unsigned char Sbox[][16] = {
    { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 },
    { 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 },
    { 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 },
    { 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 },
    { 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 },
    { 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf },
    { 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 },
    { 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 },
    { 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 },
    { 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb },
    { 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 },
    { 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 },
    { 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a },
    { 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e },
    { 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf },
    { 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 } };

unsigned char InvSbox[][16] = { { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb } ,
								{ 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb } ,
								{ 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e } ,
								{ 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 } ,
								{ 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 } ,
								{ 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 } ,
								{ 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 } ,
								{ 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b } ,
								{ 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 } ,
								{ 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e } ,
								{ 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b } ,
								{ 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 } ,
								{ 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f } ,
								{ 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef } ,
								{ 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 } ,
								{ 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d } };
			
unsigned int Rcon[] = { 0x00000000, 0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000,
						0x1B000000, 0x36000000, 0x6C000000, 0xD8000000, 0xAB000000, 0x4D000000, 0x9A000000, 0x2F000000, 0x5E000000, 
						0xBC000000, 0x63000000, 0xC6000000, 0x97000000, 0x35000000, 0x6A000000, 0xD4000000, 0xB3000000, 0x7D000000, 
						0xFA000000, 0xEF000000, 0xC5000000, 0x91000000, 0x39000000, 0x72000000, 0xE4000000, 0xD3000000, 0xBD000000, 
						0x61000000, 0xC2000000, 0x9F000000, 0x25000000, 0x4A000000, 0x94000000, 0x33000000, 0x66000000, 0xCC000000,
						0x83000000, 0x1D000000, 0x3A000000, 0x74000000, 0xE8000000, 0xCB000000, 0x8D000000};

AES::AES(char *k, int len){
	key = new unsigned char[len];
	state = new unsigned char*[4];
	for(int i = 0; i < 4; i++) state[i] = new unsigned char[4];
	for(int i = 0; i < len; i++){
		key[i] = k[i];
	}
	Nb = 4;
	Nk = len/4;
	Nr = Nk + 6;
	expandedKey = new unsigned int[Nb*(Nr+1)];
	keyExpansion();
}

unsigned char AES::xtime(const unsigned char& byte){
	unsigned char b = byte;
	b <<= 1;
	if(byte & 0x80) b ^= 0x1b;
	return b;
}

unsigned char AES::ffAdd(const unsigned char& byte1, const unsigned char& byte2){
	return byte1 ^ byte2;
}

unsigned char AES::ffMultiply(const unsigned char& b1,const unsigned char& b2){
	unsigned char sum = 0, byte1 = b1, byte2 = b2;
	do{
		if(byte1 & 0x01) sum ^= byte2;
		byte1 >>= 1;
		byte2 = xtime(byte2);
	} while(byte1);
	return sum;
}

unsigned int AES::subWord(unsigned int word){
	unsigned char bytes[4];
	unsigned int newWord = 0;
	int j = 0;
	
	for(int i = 3; i >= 0; i--){
		bytes[i] = (unsigned char) word;
		word >>= 8;
	}
		
	newWord |= (unsigned int) Sbox[bytes[j] >> 4][bytes[j] & 0x0f];
	for(j = 1; j < 4; j++){
		newWord <<= 8;
		newWord |= (unsigned int) Sbox[bytes[j] >> 4][bytes[j] & 0x0f];
	}
	
	return newWord;
}

unsigned int AES::rotWord(unsigned int word){
	return (word << 8)|(word >> 24);
}

void AES::keyExpansion(){
	unsigned int temp;
	int i;
	
	for(i = 0; i < Nk; i++) expandedKey[i] = word(key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]);

	for(i = Nk; i < 4*(Nr+1); i++){
		temp = expandedKey[i-1];
		if(i % Nk == 0) temp = subWord(rotWord(temp)) ^ Rcon[i/Nk];
		else if(Nk > 6 && i % Nk == 4) temp = subWord(temp);
		expandedKey[i] = expandedKey[i-Nk] ^ temp;
	}
}

unsigned int AES::word(const unsigned char& b1, const unsigned char& b2, const unsigned char& b3, const unsigned char& b4){
	unsigned int newWord = 0;
	
	newWord |= b1;
	newWord <<= 8;
	newWord |= b2;
	newWord <<= 8;
	newWord |= b3;
	newWord <<= 8;
	newWord |= b4;
	return newWord;
}

void AES::subBytes(){
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			state[i][j] = Sbox[state[i][j] >> 4][state[i][j] & 0x0f];
		}
	}
}

void AES::shiftRows(){
	unsigned char temp;
	for(int i = 1; i < 4; i++){
		for(int j = 0; j < i; j++){
			temp = state[i][0];
			for(int k = 0; k < 4; k++)
				state[i][k] = state[i][k+1];
			state[i][3] = temp;
		}
	}
}

void AES::mixColumns(){
	unsigned char temp[4];
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++)
			temp[j] = state[j][i];
		state[0][i] = xtime(temp[0]) ^ xtime(temp[1]) ^ temp[1] ^ temp[2] ^ temp[3];
		state[1][i] = temp[0] ^ xtime(temp[1]) ^ xtime(temp[2]) ^ temp[2] ^ temp[3];
		state[2][i] = temp[0] ^ temp[1] ^ xtime(temp[2]) ^ xtime(temp[3]) ^ temp[3];
		state[3][i] = xtime(temp[0]) ^ temp[0] ^ temp[1] ^ temp[2] ^ xtime(temp[3]);
	}
}

void AES::addRoundKey(const unsigned int *words){
	unsigned int word;
	for(int i = 0; i < 4; i++){
		word = words[i];
		state[3][i] ^= (unsigned char) word;
		word >>= 8;
		state[2][i] ^= (unsigned char) word;
		word >>= 8;
		state[1][i] ^= (unsigned char) word;
		word >>= 8;
		state[0][i] ^= (unsigned char) word;
	}
}

void AES::cipher(unsigned char *in, unsigned char *out){
	int round = 0;
	makeState(in, state);
	printData(0, round, round);
	printData(5, round, round);
	addRoundKey(expandedKey);
	for(round = 1; round < Nr; round++){
		printData(1, round, round);
		subBytes();
		printData(2, round, round);
		shiftRows();
		printData(3, round, round);
		mixColumns();
		printData(4, round, round);
		addRoundKey(&expandedKey[Nb*round]);
		printData(5, round, round);
	}
	printData(1, round, round);
	subBytes();
	printData(2, round, round);
	shiftRows();
	printData(3, round, round);
	addRoundKey(&expandedKey[Nb*Nr]);
	printData(5, round, round);
	printData(6, round, round);
	makeOut(state, out);
}

void AES::freeMemory(){
	delete [] key;
	delete [] expandedKey;
	for(int i = 0; i < 4; i++){
		delete [] state[i];
	}
	delete [] state;
}

void makeState(unsigned char *in, unsigned char **state){
	for(int i = 0; i < 16; i++){
		state[i%4][i/4] = in[i];
	}
}

void makeOut(unsigned char **state, unsigned char *out){
	for(int i = 0; i < 16; i++){
		out[i] = state[i%4][i/4];
	}
}

void AES::printState(){
	printf("state[4][4] = { ");
	for(int i = 0; i < 4; i++){
		if(i) printf("\t\t");
		printf("{");
		for(int j = 0; j < 4; j++){
			if(j != 3) printf("0x%02x, ", state[i][j]);
			else printf("0x%02x},\n", state[i][j]);
		}
	}
	printf("};\n\n");
}

void AES::invShiftRows(){
	unsigned char temp;
	for(int i = 1; i < 4; i++){
		for(int j = 0; j < i; j++){
			temp = state[i][3];
			for(int k = 3; k >= 0; k--)
				state[i][k] = state[i][k-1];
			state[i][0] = temp;
		}
	}
}

void AES::invSubBytes(){
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			state[i][j] = InvSbox[state[i][j] >> 4][state[i][j] & 0x0f];
		}
	}
}

void AES::invMixColumns(){
	unsigned char temp[4];
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++)
			temp[j] = state[j][i];
		state[0][i] = ffMultiply(0x0e, temp[0]) ^ ffMultiply(0x0b, temp[1]) ^ ffMultiply(0x0d, temp[2]) ^ ffMultiply(0x09, temp[3]);
		state[1][i] = ffMultiply(0x09, temp[0]) ^ ffMultiply(0x0e, temp[1]) ^ ffMultiply(0x0b, temp[2]) ^ ffMultiply(0x0d, temp[3]);
		state[2][i] = ffMultiply(0x0d, temp[0]) ^ ffMultiply(0x09, temp[1]) ^ ffMultiply(0x0e, temp[2]) ^ ffMultiply(0x0b, temp[3]);
		state[3][i] = ffMultiply(0x0b, temp[0]) ^ ffMultiply(0x0d, temp[1]) ^ ffMultiply(0x09, temp[2]) ^ ffMultiply(0x0e, temp[3]);
	}
}

void AES::invCipher(unsigned char *in, unsigned char *out){
	int round = Nr;
	int iter = 0;
	
	makeState(in, state);
	printData(7, round, iter);
	printData(11, round, iter);
	addRoundKey(&expandedKey[Nb*Nr]);
	for(round = Nr - 1; round > 0; round--){
		iter++;
		printData(8, round, iter);
		invShiftRows();
		printData(10, round, iter);
		invSubBytes();
		printData(9, round, iter);
		addRoundKey(&expandedKey[round*Nb]);
		printData(11, round, iter);
		printData(12, round, iter);
		invMixColumns();
	}
	iter++;
	printData(8, round, iter);
	invShiftRows();
	printData(10, round, iter);
	invSubBytes();
	printData(9, round, iter);
	addRoundKey(&expandedKey[0]);
	printData(11, round, iter);
	printData(13, round, iter);
	makeOut(state, out);
}

void AES::printData(const int& mode, const int& round, const int& iteration){
	printf("round[%2d].%-10s", iteration, LEGEND[mode].c_str());
	if(mode == 5 || mode == 11){
		for(int i = round * 4; i < round * 4 + 4; i++) printf("%08x", expandedKey[i]);
	}
	else {
		for(int i = 0; i < 4; i++){
			for(int j = 0; j < 4; j++){
				printf("%02x", state[j][i]);
			}
		}
	}
	printf("\n");
}